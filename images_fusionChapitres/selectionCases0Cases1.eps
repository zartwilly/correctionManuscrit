%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 685 104
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Wednesday, April 18, 2018 10:04:53 AM CEST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
685 104 setpagesize
0 0 0 0 setmargins
0 0 setorigin
685 104 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
685.000 0.00000 l
685.000 104.000 l
0.00000 104.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
685.000 0.00000 l
685.000 104.000 l
0.00000 104.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 685 104 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -194.000 -199.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
194.000 199.000 m
879.000 199.000 l
879.000 303.000 l
194.000 303.000 l
194.000 199.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -194.000 -199.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -194.000 -199.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -194.000 -199.000 ] defaultmatrix matrix concatmatrix setmatrix
0 J
1.45000 M
newpath
513.102 276.170 m
513.102 279.654 l
512.023 279.654 l
512.023 270.592 l
513.102 270.592 l
513.102 271.592 l
513.331 271.196 513.617 270.904 513.961 270.717  c
514.305 270.529 514.716 270.436 515.195 270.436  c
515.997 270.436 516.648 270.751 517.148 271.381  c
517.648 272.011 517.898 272.842 517.898 273.873  c
517.898 274.904 517.648 275.738 517.148 276.373  c
516.648 277.008 515.997 277.326 515.195 277.326  c
514.716 277.326 514.305 277.230 513.961 277.037  c
513.617 276.844 513.331 276.555 513.102 276.170  c
h
516.773 273.873 m
516.773 273.081 516.609 272.462 516.281 272.014  c
515.953 271.566 515.508 271.342 514.945 271.342  c
514.372 271.342 513.922 271.566 513.594 272.014  c
513.266 272.462 513.102 273.081 513.102 273.873  c
513.102 274.665 513.266 275.287 513.594 275.740  c
513.922 276.193 514.372 276.420 514.945 276.420  c
515.508 276.420 515.953 276.193 516.281 275.740  c
516.609 275.287 516.773 274.665 516.773 273.873  c
h
524.672 279.154 m
524.672 279.982 l
518.422 279.982 l
518.422 279.154 l
524.672 279.154 l
h
530.406 270.842 m
530.406 271.857 l
530.094 271.680 529.786 271.550 529.484 271.467  c
529.182 271.383 528.875 271.342 528.562 271.342  c
527.854 271.342 527.307 271.563 526.922 272.006  c
526.536 272.449 526.344 273.071 526.344 273.873  c
526.344 274.675 526.536 275.298 526.922 275.740  c
527.307 276.183 527.854 276.404 528.562 276.404  c
528.875 276.404 529.182 276.363 529.484 276.279  c
529.786 276.196 530.094 276.071 530.406 275.904  c
530.406 276.904 l
530.104 277.040 529.792 277.144 529.469 277.217  c
529.146 277.290 528.802 277.326 528.438 277.326  c
527.448 277.326 526.661 277.016 526.078 276.396  c
525.495 275.777 525.203 274.936 525.203 273.873  c
525.203 272.811 525.497 271.972 526.086 271.357  c
526.674 270.743 527.484 270.436 528.516 270.436  c
528.839 270.436 529.159 270.469 529.477 270.537  c
529.794 270.605 530.104 270.706 530.406 270.842  c
h
534.816 271.342 m
534.243 271.342 533.788 271.568 533.449 272.021  c
533.111 272.475 532.941 273.092 532.941 273.873  c
532.941 274.665 533.108 275.285 533.441 275.732  c
533.775 276.180 534.233 276.404 534.816 276.404  c
535.389 276.404 535.845 276.178 536.184 275.725  c
536.522 275.271 536.691 274.654 536.691 273.873  c
536.691 273.102 536.522 272.488 536.184 272.029  c
535.845 271.571 535.389 271.342 534.816 271.342  c
h
534.816 270.436 m
535.754 270.436 536.491 270.740 537.027 271.350  c
537.564 271.959 537.832 272.800 537.832 273.873  c
537.832 274.946 537.564 275.790 537.027 276.404  c
536.491 277.019 535.754 277.326 534.816 277.326  c
533.879 277.326 533.142 277.019 532.605 276.404  c
532.069 275.790 531.801 274.946 531.801 273.873  c
531.801 272.800 532.069 271.959 532.605 271.350  c
533.142 270.740 533.879 270.436 534.816 270.436  c
h
543.424 271.592 m
543.299 271.529 543.166 271.480 543.025 271.443  c
542.885 271.407 542.726 271.389 542.549 271.389  c
541.945 271.389 541.479 271.587 541.150 271.982  c
540.822 272.378 540.658 272.951 540.658 273.701  c
540.658 277.154 l
539.580 277.154 l
539.580 270.592 l
540.658 270.592 l
540.658 271.607 l
540.887 271.212 541.184 270.917 541.549 270.725  c
541.913 270.532 542.356 270.436 542.877 270.436  c
542.950 270.436 543.031 270.441 543.119 270.451  c
543.208 270.462 543.304 270.477 543.408 270.498  c
543.424 271.592 l
h
548.357 271.592 m
548.232 271.529 548.100 271.480 547.959 271.443  c
547.818 271.407 547.660 271.389 547.482 271.389  c
546.878 271.389 546.412 271.587 546.084 271.982  c
545.756 272.378 545.592 272.951 545.592 273.701  c
545.592 277.154 l
544.514 277.154 l
544.514 270.592 l
545.592 270.592 l
545.592 271.607 l
545.821 271.212 546.118 270.917 546.482 270.725  c
546.847 270.532 547.290 270.436 547.811 270.436  c
547.883 270.436 547.964 270.441 548.053 270.451  c
548.141 270.462 548.238 270.477 548.342 270.498  c
548.357 271.592 l
h
555.104 273.607 m
555.104 274.123 l
550.135 274.123 l
550.187 274.873 550.413 275.441 550.814 275.826  c
551.215 276.212 551.770 276.404 552.479 276.404  c
552.895 276.404 553.299 276.355 553.689 276.256  c
554.080 276.157 554.468 276.003 554.854 275.795  c
554.854 276.826 l
554.458 276.982 554.057 277.105 553.650 277.193  c
553.244 277.282 552.833 277.326 552.416 277.326  c
551.374 277.326 550.546 277.021 549.932 276.412  c
549.317 275.803 549.010 274.977 549.010 273.936  c
549.010 272.863 549.301 272.011 549.885 271.381  c
550.468 270.751 551.249 270.436 552.229 270.436  c
553.114 270.436 553.814 270.719 554.330 271.287  c
554.846 271.855 555.104 272.628 555.104 273.607  c
h
554.025 273.279 m
554.015 272.696 553.848 272.227 553.525 271.873  c
553.202 271.519 552.775 271.342 552.244 271.342  c
551.640 271.342 551.158 271.514 550.799 271.857  c
550.439 272.201 550.234 272.680 550.182 273.295  c
554.025 273.279 l
h
556.861 268.029 m
557.939 268.029 l
557.939 277.154 l
556.861 277.154 l
556.861 268.029 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
238.995 269.186 m
238.391 269.186 237.935 269.485 237.628 270.084  c
237.321 270.683 237.167 271.587 237.167 272.795  c
237.167 273.993 237.321 274.891 237.628 275.490  c
237.935 276.089 238.391 276.389 238.995 276.389  c
239.610 276.389 240.071 276.089 240.378 275.490  c
240.685 274.891 240.839 273.993 240.839 272.795  c
240.839 271.587 240.685 270.683 240.378 270.084  c
240.071 269.485 239.610 269.186 238.995 269.186  c
h
238.995 268.248 m
239.974 268.248 240.724 268.636 241.245 269.412  c
241.766 270.188 242.026 271.316 242.026 272.795  c
242.026 274.264 241.766 275.386 241.245 276.162  c
240.724 276.938 239.974 277.326 238.995 277.326  c
238.016 277.326 237.269 276.938 236.753 276.162  c
236.237 275.386 235.979 274.264 235.979 272.795  c
235.979 271.316 236.237 270.188 236.753 269.412  c
237.269 268.636 238.016 268.248 238.995 268.248  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
829.667 276.154 m
831.604 276.154 l
831.604 269.482 l
829.495 269.904 l
829.495 268.826 l
831.589 268.404 l
832.776 268.404 l
832.776 276.154 l
834.714 276.154 l
834.714 277.154 l
829.667 277.154 l
829.667 276.154 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
633.632 226.842 m
633.632 227.857 l
633.319 227.680 633.012 227.550 632.710 227.467  c
632.408 227.383 632.101 227.342 631.788 227.342  c
631.080 227.342 630.533 227.563 630.147 228.006  c
629.762 228.449 629.569 229.071 629.569 229.873  c
629.569 230.675 629.762 231.298 630.147 231.740  c
630.533 232.183 631.080 232.404 631.788 232.404  c
632.101 232.404 632.408 232.363 632.710 232.279  c
633.012 232.196 633.319 232.071 633.632 231.904  c
633.632 232.904 l
633.330 233.040 633.017 233.144 632.694 233.217  c
632.371 233.290 632.028 233.326 631.663 233.326  c
630.674 233.326 629.887 233.016 629.304 232.396  c
628.720 231.777 628.429 230.936 628.429 229.873  c
628.429 228.811 628.723 227.972 629.312 227.357  c
629.900 226.743 630.710 226.436 631.741 226.436  c
632.064 226.436 632.384 226.469 632.702 226.537  c
633.020 226.605 633.330 226.706 633.632 226.842  c
h
638.479 229.857 m
637.615 229.857 637.013 229.956 636.675 230.154  c
636.336 230.352 636.167 230.691 636.167 231.170  c
636.167 231.555 636.295 231.860 636.550 232.084  c
636.805 232.308 637.146 232.420 637.573 232.420  c
638.177 232.420 638.659 232.209 639.019 231.787  c
639.378 231.365 639.558 230.800 639.558 230.092  c
639.558 229.857 l
638.479 229.857 l
h
640.636 229.404 m
640.636 233.154 l
639.558 233.154 l
639.558 232.154 l
639.308 232.550 639.000 232.844 638.636 233.037  c
638.271 233.230 637.823 233.326 637.292 233.326  c
636.615 233.326 636.078 233.136 635.683 232.756  c
635.287 232.376 635.089 231.873 635.089 231.248  c
635.089 230.508 635.336 229.951 635.831 229.576  c
636.326 229.201 637.063 229.014 638.042 229.014  c
639.558 229.014 l
639.558 228.904 l
639.558 228.404 639.394 228.019 639.065 227.748  c
638.737 227.477 638.282 227.342 637.698 227.342  c
637.323 227.342 636.956 227.389 636.597 227.482  c
636.237 227.576 635.896 227.712 635.573 227.889  c
635.573 226.889 l
635.969 226.732 636.352 226.618 636.722 226.545  c
637.091 226.472 637.453 226.436 637.808 226.436  c
638.756 226.436 639.464 226.680 639.933 227.170  c
640.401 227.660 640.636 228.404 640.636 229.404  c
h
647.036 226.779 m
647.036 227.811 l
646.734 227.654 646.419 227.537 646.091 227.459  c
645.763 227.381 645.422 227.342 645.067 227.342  c
644.536 227.342 644.135 227.423 643.864 227.584  c
643.593 227.745 643.458 227.993 643.458 228.326  c
643.458 228.576 643.554 228.771 643.747 228.912  c
643.940 229.053 644.328 229.186 644.911 229.311  c
645.271 229.404 l
646.041 229.561 646.588 229.790 646.911 230.092  c
647.234 230.394 647.396 230.811 647.396 231.342  c
647.396 231.956 647.153 232.441 646.669 232.795  c
646.185 233.149 645.521 233.326 644.677 233.326  c
644.323 233.326 643.955 233.292 643.575 233.225  c
643.195 233.157 642.797 233.055 642.380 232.920  c
642.380 231.795 l
642.776 232.003 643.166 232.160 643.552 232.264  c
643.937 232.368 644.323 232.420 644.708 232.420  c
645.208 232.420 645.596 232.334 645.872 232.162  c
646.148 231.990 646.286 231.743 646.286 231.420  c
646.286 231.128 646.187 230.904 645.989 230.748  c
645.791 230.592 645.359 230.441 644.692 230.295  c
644.317 230.217 l
643.651 230.071 643.169 229.852 642.872 229.561  c
642.575 229.269 642.427 228.873 642.427 228.373  c
642.427 227.748 642.646 227.269 643.083 226.936  c
643.521 226.602 644.140 226.436 644.942 226.436  c
645.338 226.436 645.713 226.464 646.067 226.521  c
646.422 226.579 646.744 226.665 647.036 226.779  c
h
654.726 229.607 m
654.726 230.123 l
649.757 230.123 l
649.809 230.873 650.035 231.441 650.437 231.826  c
650.838 232.212 651.392 232.404 652.101 232.404  c
652.517 232.404 652.921 232.355 653.312 232.256  c
653.702 232.157 654.090 232.003 654.476 231.795  c
654.476 232.826 l
654.080 232.982 653.679 233.105 653.272 233.193  c
652.866 233.282 652.455 233.326 652.038 233.326  c
650.996 233.326 650.168 233.021 649.554 232.412  c
648.939 231.803 648.632 230.977 648.632 229.936  c
648.632 228.863 648.924 228.011 649.507 227.381  c
650.090 226.751 650.871 226.436 651.851 226.436  c
652.736 226.436 653.437 226.719 653.952 227.287  c
654.468 227.855 654.726 228.628 654.726 229.607  c
h
653.647 229.279 m
653.637 228.696 653.470 228.227 653.147 227.873  c
652.825 227.519 652.397 227.342 651.866 227.342  c
651.262 227.342 650.780 227.514 650.421 227.857  c
650.062 228.201 649.856 228.680 649.804 229.295  c
653.647 229.279 l
h
660.671 226.779 m
660.671 227.811 l
660.369 227.654 660.054 227.537 659.726 227.459  c
659.397 227.381 659.056 227.342 658.702 227.342  c
658.171 227.342 657.770 227.423 657.499 227.584  c
657.228 227.745 657.093 227.993 657.093 228.326  c
657.093 228.576 657.189 228.771 657.382 228.912  c
657.575 229.053 657.963 229.186 658.546 229.311  c
658.905 229.404 l
659.676 229.561 660.223 229.790 660.546 230.092  c
660.869 230.394 661.030 230.811 661.030 231.342  c
661.030 231.956 660.788 232.441 660.304 232.795  c
659.819 233.149 659.155 233.326 658.312 233.326  c
657.957 233.326 657.590 233.292 657.210 233.225  c
656.830 233.157 656.431 233.055 656.015 232.920  c
656.015 231.795 l
656.410 232.003 656.801 232.160 657.187 232.264  c
657.572 232.368 657.957 232.420 658.343 232.420  c
658.843 232.420 659.231 232.334 659.507 232.162  c
659.783 231.990 659.921 231.743 659.921 231.420  c
659.921 231.128 659.822 230.904 659.624 230.748  c
659.426 230.592 658.994 230.441 658.327 230.295  c
657.952 230.217 l
657.285 230.071 656.804 229.852 656.507 229.561  c
656.210 229.269 656.062 228.873 656.062 228.373  c
656.062 227.748 656.280 227.269 656.718 226.936  c
657.155 226.602 657.775 226.436 658.577 226.436  c
658.973 226.436 659.348 226.464 659.702 226.521  c
660.056 226.579 660.379 226.665 660.671 226.779  c
h
669.534 229.857 m
668.670 229.857 668.068 229.956 667.729 230.154  c
667.391 230.352 667.222 230.691 667.222 231.170  c
667.222 231.555 667.349 231.860 667.604 232.084  c
667.860 232.308 668.201 232.420 668.628 232.420  c
669.232 232.420 669.714 232.209 670.073 231.787  c
670.433 231.365 670.612 230.800 670.612 230.092  c
670.612 229.857 l
669.534 229.857 l
h
671.690 229.404 m
671.690 233.154 l
670.612 233.154 l
670.612 232.154 l
670.362 232.550 670.055 232.844 669.690 233.037  c
669.326 233.230 668.878 233.326 668.347 233.326  c
667.670 233.326 667.133 233.136 666.737 232.756  c
666.341 232.376 666.144 231.873 666.144 231.248  c
666.144 230.508 666.391 229.951 666.886 229.576  c
667.381 229.201 668.118 229.014 669.097 229.014  c
670.612 229.014 l
670.612 228.904 l
670.612 228.404 670.448 228.019 670.120 227.748  c
669.792 227.477 669.336 227.342 668.753 227.342  c
668.378 227.342 668.011 227.389 667.651 227.482  c
667.292 227.576 666.951 227.712 666.628 227.889  c
666.628 226.889 l
667.024 226.732 667.407 226.618 667.776 226.545  c
668.146 226.472 668.508 226.436 668.862 226.436  c
669.810 226.436 670.519 226.680 670.987 227.170  c
671.456 227.660 671.690 228.404 671.690 229.404  c
h
678.077 232.154 m
680.015 232.154 l
680.015 225.482 l
677.905 225.904 l
677.905 224.826 l
679.999 224.404 l
681.187 224.404 l
681.187 232.154 l
683.124 232.154 l
683.124 233.154 l
678.077 233.154 l
678.077 232.154 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
345.632 228.842 m
345.632 229.857 l
345.319 229.680 345.012 229.550 344.710 229.467  c
344.408 229.383 344.101 229.342 343.788 229.342  c
343.080 229.342 342.533 229.563 342.147 230.006  c
341.762 230.449 341.569 231.071 341.569 231.873  c
341.569 232.675 341.762 233.298 342.147 233.740  c
342.533 234.183 343.080 234.404 343.788 234.404  c
344.101 234.404 344.408 234.363 344.710 234.279  c
345.012 234.196 345.319 234.071 345.632 233.904  c
345.632 234.904 l
345.330 235.040 345.017 235.144 344.694 235.217  c
344.371 235.290 344.028 235.326 343.663 235.326  c
342.674 235.326 341.887 235.016 341.304 234.396  c
340.720 233.777 340.429 232.936 340.429 231.873  c
340.429 230.811 340.723 229.972 341.312 229.357  c
341.900 228.743 342.710 228.436 343.741 228.436  c
344.064 228.436 344.384 228.469 344.702 228.537  c
345.020 228.605 345.330 228.706 345.632 228.842  c
h
350.479 231.857 m
349.615 231.857 349.013 231.956 348.675 232.154  c
348.336 232.352 348.167 232.691 348.167 233.170  c
348.167 233.555 348.295 233.860 348.550 234.084  c
348.805 234.308 349.146 234.420 349.573 234.420  c
350.177 234.420 350.659 234.209 351.019 233.787  c
351.378 233.365 351.558 232.800 351.558 232.092  c
351.558 231.857 l
350.479 231.857 l
h
352.636 231.404 m
352.636 235.154 l
351.558 235.154 l
351.558 234.154 l
351.308 234.550 351.000 234.844 350.636 235.037  c
350.271 235.230 349.823 235.326 349.292 235.326  c
348.615 235.326 348.078 235.136 347.683 234.756  c
347.287 234.376 347.089 233.873 347.089 233.248  c
347.089 232.508 347.336 231.951 347.831 231.576  c
348.326 231.201 349.063 231.014 350.042 231.014  c
351.558 231.014 l
351.558 230.904 l
351.558 230.404 351.394 230.019 351.065 229.748  c
350.737 229.477 350.282 229.342 349.698 229.342  c
349.323 229.342 348.956 229.389 348.597 229.482  c
348.237 229.576 347.896 229.712 347.573 229.889  c
347.573 228.889 l
347.969 228.732 348.352 228.618 348.722 228.545  c
349.091 228.472 349.453 228.436 349.808 228.436  c
350.756 228.436 351.464 228.680 351.933 229.170  c
352.401 229.660 352.636 230.404 352.636 231.404  c
h
359.036 228.779 m
359.036 229.811 l
358.734 229.654 358.419 229.537 358.091 229.459  c
357.763 229.381 357.422 229.342 357.067 229.342  c
356.536 229.342 356.135 229.423 355.864 229.584  c
355.593 229.745 355.458 229.993 355.458 230.326  c
355.458 230.576 355.554 230.771 355.747 230.912  c
355.940 231.053 356.328 231.186 356.911 231.311  c
357.271 231.404 l
358.041 231.561 358.588 231.790 358.911 232.092  c
359.234 232.394 359.396 232.811 359.396 233.342  c
359.396 233.956 359.153 234.441 358.669 234.795  c
358.185 235.149 357.521 235.326 356.677 235.326  c
356.323 235.326 355.955 235.292 355.575 235.225  c
355.195 235.157 354.797 235.055 354.380 234.920  c
354.380 233.795 l
354.776 234.003 355.166 234.160 355.552 234.264  c
355.937 234.368 356.323 234.420 356.708 234.420  c
357.208 234.420 357.596 234.334 357.872 234.162  c
358.148 233.990 358.286 233.743 358.286 233.420  c
358.286 233.128 358.187 232.904 357.989 232.748  c
357.791 232.592 357.359 232.441 356.692 232.295  c
356.317 232.217 l
355.651 232.071 355.169 231.852 354.872 231.561  c
354.575 231.269 354.427 230.873 354.427 230.373  c
354.427 229.748 354.646 229.269 355.083 228.936  c
355.521 228.602 356.140 228.436 356.942 228.436  c
357.338 228.436 357.713 228.464 358.067 228.521  c
358.422 228.579 358.744 228.665 359.036 228.779  c
h
366.726 231.607 m
366.726 232.123 l
361.757 232.123 l
361.809 232.873 362.035 233.441 362.437 233.826  c
362.838 234.212 363.392 234.404 364.101 234.404  c
364.517 234.404 364.921 234.355 365.312 234.256  c
365.702 234.157 366.090 234.003 366.476 233.795  c
366.476 234.826 l
366.080 234.982 365.679 235.105 365.272 235.193  c
364.866 235.282 364.455 235.326 364.038 235.326  c
362.996 235.326 362.168 235.021 361.554 234.412  c
360.939 233.803 360.632 232.977 360.632 231.936  c
360.632 230.863 360.924 230.011 361.507 229.381  c
362.090 228.751 362.871 228.436 363.851 228.436  c
364.736 228.436 365.437 228.719 365.952 229.287  c
366.468 229.855 366.726 230.628 366.726 231.607  c
h
365.647 231.279 m
365.637 230.696 365.470 230.227 365.147 229.873  c
364.825 229.519 364.397 229.342 363.866 229.342  c
363.262 229.342 362.780 229.514 362.421 229.857  c
362.062 230.201 361.856 230.680 361.804 231.295  c
365.647 231.279 l
h
372.671 228.779 m
372.671 229.811 l
372.369 229.654 372.054 229.537 371.726 229.459  c
371.397 229.381 371.056 229.342 370.702 229.342  c
370.171 229.342 369.770 229.423 369.499 229.584  c
369.228 229.745 369.093 229.993 369.093 230.326  c
369.093 230.576 369.189 230.771 369.382 230.912  c
369.575 231.053 369.963 231.186 370.546 231.311  c
370.905 231.404 l
371.676 231.561 372.223 231.790 372.546 232.092  c
372.869 232.394 373.030 232.811 373.030 233.342  c
373.030 233.956 372.788 234.441 372.304 234.795  c
371.819 235.149 371.155 235.326 370.312 235.326  c
369.957 235.326 369.590 235.292 369.210 235.225  c
368.830 235.157 368.431 235.055 368.015 234.920  c
368.015 233.795 l
368.410 234.003 368.801 234.160 369.187 234.264  c
369.572 234.368 369.957 234.420 370.343 234.420  c
370.843 234.420 371.231 234.334 371.507 234.162  c
371.783 233.990 371.921 233.743 371.921 233.420  c
371.921 233.128 371.822 232.904 371.624 232.748  c
371.426 232.592 370.994 232.441 370.327 232.295  c
369.952 232.217 l
369.285 232.071 368.804 231.852 368.507 231.561  c
368.210 231.269 368.062 230.873 368.062 230.373  c
368.062 229.748 368.280 229.269 368.718 228.936  c
369.155 228.602 369.775 228.436 370.577 228.436  c
370.973 228.436 371.348 228.464 371.702 228.521  c
372.056 228.579 372.379 228.665 372.671 228.779  c
h
381.534 231.857 m
380.670 231.857 380.068 231.956 379.729 232.154  c
379.391 232.352 379.222 232.691 379.222 233.170  c
379.222 233.555 379.349 233.860 379.604 234.084  c
379.860 234.308 380.201 234.420 380.628 234.420  c
381.232 234.420 381.714 234.209 382.073 233.787  c
382.433 233.365 382.612 232.800 382.612 232.092  c
382.612 231.857 l
381.534 231.857 l
h
383.690 231.404 m
383.690 235.154 l
382.612 235.154 l
382.612 234.154 l
382.362 234.550 382.055 234.844 381.690 235.037  c
381.326 235.230 380.878 235.326 380.347 235.326  c
379.670 235.326 379.133 235.136 378.737 234.756  c
378.341 234.376 378.144 233.873 378.144 233.248  c
378.144 232.508 378.391 231.951 378.886 231.576  c
379.381 231.201 380.118 231.014 381.097 231.014  c
382.612 231.014 l
382.612 230.904 l
382.612 230.404 382.448 230.019 382.120 229.748  c
381.792 229.477 381.336 229.342 380.753 229.342  c
380.378 229.342 380.011 229.389 379.651 229.482  c
379.292 229.576 378.951 229.712 378.628 229.889  c
378.628 228.889 l
379.024 228.732 379.407 228.618 379.776 228.545  c
380.146 228.472 380.508 228.436 380.862 228.436  c
381.810 228.436 382.519 228.680 382.987 229.170  c
383.456 229.660 383.690 230.404 383.690 231.404  c
h
392.405 227.186 m
391.801 227.186 391.345 227.485 391.038 228.084  c
390.731 228.683 390.577 229.587 390.577 230.795  c
390.577 231.993 390.731 232.891 391.038 233.490  c
391.345 234.089 391.801 234.389 392.405 234.389  c
393.020 234.389 393.481 234.089 393.788 233.490  c
394.095 232.891 394.249 231.993 394.249 230.795  c
394.249 229.587 394.095 228.683 393.788 228.084  c
393.481 227.485 393.020 227.186 392.405 227.186  c
h
392.405 226.248 m
393.384 226.248 394.134 226.636 394.655 227.412  c
395.176 228.188 395.437 229.316 395.437 230.795  c
395.437 232.264 395.176 233.386 394.655 234.162  c
394.134 234.938 393.384 235.326 392.405 235.326  c
391.426 235.326 390.679 234.938 390.163 234.162  c
389.647 233.386 389.390 232.264 389.390 230.795  c
389.390 229.316 389.647 228.188 390.163 227.412  c
390.679 226.636 391.426 226.248 392.405 226.248  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
239.000 252.048 m
834.000 253.952 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
534.357 245.996 m
534.643 258.004 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
238.357 245.996 m
238.643 258.004 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
831.357 245.996 m
831.643 258.004 l
S
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
